<!doctype html>
<html>
  <head>
    <title>Animation Resumption Test</title>
    <style>
      body {
        margin: 0;
        font-family: system-ui;
        padding: 20px;
        background: #f0f0f0;
      }

      .controls {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .control-group {
        margin-bottom: 16px;
        display: flex;
        gap: 12px;
        align-items: center;
        flex-wrap: wrap;
      }

      .control-group label {
        font-weight: bold;
        min-width: 120px;
      }

      button {
        padding: 8px 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background: #f8f9fa;
        cursor: pointer;
        transition: background 0.2s;
      }

      button:hover {
        background: #e9ecef;
      }

      button.active {
        background: #0066cc;
        color: white;
        border-color: #0066cc;
      }

      input[type="range"] {
        width: 200px;
      }

      input[type="number"] {
        width: 80px;
        padding: 4px 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .test-element {
        background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
        border: 2px solid #333;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 20px 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transition: box-shadow 0.2s;
        position: relative;
      }

      .test-element[data-height-animated] {
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
      }

      .test-element[data-width-animated] {
        box-shadow: 0 6px 20px rgba(78, 205, 196, 0.4);
      }

      .test-element[data-transition-opacity] {
        box-shadow: 0 6px 20px rgba(255, 255, 0, 0.4);
      }

      .test-element[data-animated] {
        box-shadow: 0 8px 24px rgba(0, 102, 204, 0.5);
      }

      .status {
        background: white;
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .status-item {
        margin: 8px 0;
        padding: 8px;
        border-radius: 4px;
        background: #f8f9fa;
      }

      .status-item.playing {
        background: #d4edda;
        border-left: 4px solid #28a745;
      }

      .status-item.paused {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
      }

      .status-item.ended {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
      }

      .debug-log {
        background: #1e1e1e;
        color: #00ff00;
        padding: 16px;
        border-radius: 8px;
        font-family: monospace;
        font-size: 12px;
        height: 200px;
        overflow-y: auto;
        margin-top: 20px;
      }

      .progress-bar {
        width: 100%;
        height: 20px;
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        margin: 8px 0;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
        transition: width 0.1s linear;
        border-radius: 10px;
      }
    </style>
  </head>
  <body>
    <h1>Animation Target Update Test</h1>
    <p>
      Test dynamic animation target updates using the new updateTarget API in
      animation_playback.js
    </p>

    <div class="controls">
      <h3>Animation Controls</h3>

      <div class="control-group">
        <label>Duration:</label>
        <input type="number" id="duration" value="3000" min="100" step="100" />
        <span>ms</span>
      </div>

      <div class="control-group">
        <label>Animation Type:</label>
        <button id="height-btn" class="active">Height</button>
        <button id="width-btn">Width</button>
        <button id="opacity-btn">Opacity</button>
        <button id="combined-btn">Combined</button>
      </div>

      <div class="control-group">
        <label>Height Target:</label>
        <input type="range" id="height-slider" min="50" max="400" value="200" />
        <input type="number" id="height-value" value="200" min="50" max="400" />
        <span>px</span>
      </div>

      <div class="control-group">
        <label>Width Target:</label>
        <input type="range" id="width-slider" min="100" max="600" value="300" />
        <input type="number" id="width-value" value="300" min="100" max="600" />
        <span>px</span>
      </div>

      <div class="control-group">
        <label>Opacity Target:</label>
        <input
          type="range"
          id="opacity-slider"
          min="0"
          max="1"
          step="0.1"
          value="0.5"
        />
        <input
          type="number"
          id="opacity-value"
          value="0.5"
          min="0"
          max="1"
          step="0.1"
        />
      </div>

      <div class="control-group">
        <label>Actions:</label>
        <button id="start-btn">Start Animation</button>
        <button id="interrupt-btn" disabled>Update Target</button>
        <button id="pause-btn" disabled>Pause</button>
        <button id="resume-btn" disabled>Resume</button>
        <button id="reset-btn">Reset Element</button>
      </div>
    </div>

    <div class="status">
      <h3>Animation Status</h3>
      <div id="status-content">
        <div class="status-item">Ready to start animation</div>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
      </div>
      <div id="progress-text">Progress: 0%</div>
    </div>

    <div
      id="test-element"
      class="test-element"
      style="width: 200px; height: 150px; opacity: 1"
    >
      Test Element
    </div>

    <div class="debug-log" id="debug-log"></div>

    <script type="module">
      import {
        createHeightAnimation,
        createWidthAnimation,
        createOpacityAnimation,
        createPlaybackGroup,
      } from "@jsenv/dom";

      const testElement = document.getElementById("test-element");
      const debugLog = document.getElementById("debug-log");
      const statusContent = document.getElementById("status-content");
      const progressFill = document.getElementById("progress-fill");
      const progressText = document.getElementById("progress-text");

      // Controls
      const durationInput = document.getElementById("duration");
      const heightSlider = document.getElementById("height-slider");
      const heightValue = document.getElementById("height-value");
      const widthSlider = document.getElementById("width-slider");
      const widthValue = document.getElementById("width-value");
      const opacitySlider = document.getElementById("opacity-slider");
      const opacityValue = document.getElementById("opacity-value");

      // Buttons
      const heightBtn = document.getElementById("height-btn");
      const widthBtn = document.getElementById("width-btn");
      const opacityBtn = document.getElementById("opacity-btn");
      const combinedBtn = document.getElementById("combined-btn");
      const startBtn = document.getElementById("start-btn");
      const interruptBtn = document.getElementById("interrupt-btn");
      const pauseBtn = document.getElementById("pause-btn");
      const resumeBtn = document.getElementById("resume-btn");
      const resetBtn = document.getElementById("reset-btn");

      let currentAnimation = null;
      let animationType = "height";

      // Sync slider and number inputs
      heightSlider.oninput = () => {
        heightValue.value = heightSlider.value;
      };
      heightValue.oninput = () => {
        heightSlider.value = heightValue.value;
      };
      widthSlider.oninput = () => {
        widthValue.value = widthSlider.value;
      };
      widthValue.oninput = () => {
        widthSlider.value = widthValue.value;
      };
      opacitySlider.oninput = () => {
        opacityValue.value = opacitySlider.value;
      };
      opacityValue.oninput = () => {
        opacitySlider.value = opacityValue.value;
      };

      // Animation type selection
      [heightBtn, widthBtn, opacityBtn, combinedBtn].forEach((btn) => {
        btn.onclick = () => {
          document
            .querySelectorAll(".control-group button")
            .forEach((b) => b.classList.remove("active"));
          btn.classList.add("active");
          animationType = btn.id.replace("-btn", "");
          log(`Animation type changed to: ${animationType}`);
        };
      });

      function log(message) {
        const timestamp = new Date().toLocaleTimeString();
        debugLog.innerHTML += `[${timestamp}] ${message}<br>`;
        debugLog.scrollTop = debugLog.scrollHeight;
      }

      function updateStatus(message, type = "") {
        statusContent.innerHTML = `<div class="status-item ${type}">${message}</div>`;
      }

      function updateProgress(progress) {
        const percentage = Math.round(progress * 100);
        progressFill.style.width = `${percentage}%`;
        progressText.textContent = `Progress: ${percentage}%`;
      }

      function updateButtons(playing) {
        startBtn.disabled = playing;
        interruptBtn.disabled = !playing;
        pauseBtn.disabled =
          !playing ||
          (currentAnimation && currentAnimation.playState === "finished");
        resumeBtn.disabled =
          playing ||
          !currentAnimation ||
          currentAnimation.playState !== "paused";
      }

      function resetElement() {
        if (currentAnimation) {
          currentAnimation.cancel();
          currentAnimation = null;
        }

        testElement.style.width = "200px";
        testElement.style.height = "150px";
        testElement.style.opacity = "1";
        testElement.style.transform = "";

        updateStatus("Element reset to initial state");
        updateProgress(0);
        updateButtons(false);
        log("Element reset to initial state");
      }

      function createAnimation() {
        const duration = parseInt(durationInput.value);

        log(`Creating ${animationType} animation (duration: ${duration}ms)`);

        const commonOptions = {
          duration,
        };

        switch (animationType) {
          case "height":
            return createHeightAnimation(
              testElement,
              parseInt(heightValue.value),
              commonOptions,
            );

          case "width":
            return createWidthAnimation(
              testElement,
              parseInt(widthValue.value),
              commonOptions,
            );

          case "opacity":
            return createOpacityAnimation(
              testElement,
              parseFloat(opacityValue.value),
              commonOptions,
            );

          case "combined": {
            const animations = [
              createHeightAnimation(testElement, parseInt(heightValue.value), {
                ...commonOptions,
              }),
              createWidthAnimation(testElement, parseInt(widthValue.value), {
                ...commonOptions,
              }),
              createOpacityAnimation(
                testElement,
                parseFloat(opacityValue.value),
                {
                  ...commonOptions,
                },
              ),
            ];
            const animGroup = createPlaybackGroup(animations);
            return animGroup;
          }

          default:
            log(`Unknown animation type: ${animationType}`);
            return null;
        }
      }

      startBtn.onclick = () => {
        if (currentAnimation) {
          currentAnimation.cancel();
        }

        currentAnimation = createAnimation();

        // Set up progress callback using channels
        currentAnimation.channels.progress.add(({ progress }) => {
          updateProgress(progress);
        });

        currentAnimation.play();

        updateStatus("Animation started", "playing");
        updateButtons(true);
        log(`Started ${animationType} animation`);

        // Handle animation end
        currentAnimation.channels.finish.add(() => {
          updateStatus("Animation completed", "ended");
          updateButtons(false);
          log("Animation completed");
        });
      };

      interruptBtn.onclick = () => {
        if (!currentAnimation || currentAnimation.playState === "finished") {
          return;
        }

        log(`Interrupting animation and updating target`);

        // Update target using the new updateTarget method
        switch (animationType) {
          case "height":
            currentAnimation.updateTarget(parseInt(heightValue.value));
            log(`Updated height target to ${heightValue.value}px`);
            break;
          case "width":
            currentAnimation.updateTarget(parseInt(widthValue.value));
            log(`Updated width target to ${widthValue.value}px`);
            break;
          case "opacity":
            currentAnimation.updateTarget(parseFloat(opacityValue.value));
            log(`Updated opacity target to ${opacityValue.value}`);
            break;
          case "combined":
            // For combined animations, we need to update each individual animation
            log(`Combined animations don't support updateTarget yet`);
            break;
          default:
            log(`Unknown animation type: ${animationType}`);
            break;
        }

        updateStatus("Animation target updated", "playing");
      };

      pauseBtn.onclick = () => {
        if (currentAnimation && currentAnimation.pause) {
          currentAnimation.pause();
          updateStatus("Animation paused", "paused");
          updateButtons(false);
          log("Animation paused");
        }
      };

      resumeBtn.onclick = () => {
        if (currentAnimation && currentAnimation.play) {
          currentAnimation.play();
          updateStatus("Animation resumed", "playing");
          updateButtons(true);
          log("Animation resumed");
        }
      };

      resetBtn.onclick = resetElement;

      // Initialize
      log("Animation target update test initialized with new updateTarget API");
      updateStatus("Ready to start animation");
      updateButtons(false);
    </script>
  </body>
</html>
