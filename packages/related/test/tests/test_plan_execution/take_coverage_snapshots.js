import { startFileServer } from "@jsenv/core/tests/start_file_server.js";
import { writeFileSync } from "@jsenv/filesystem";
import { chromium as playwrightChromium } from "playwright";
import prettier from "prettier";

// take screenshot of coverage generated by istanbul
export const takeCoverageSnapshots = async (
  coverageDirectoryUrl,
  fileRelativeUrls,
  { screenshotDirectoryUrl, htmlDirectoryUrl } = {},
) => {
  const browser = await playwrightChromium.launch();
  const page = await browser.newPage();
  const fileServer = await startFileServer({
    rootDirectoryUrl: coverageDirectoryUrl,
  });
  for (const fileRelativeUrl of fileRelativeUrls) {
    await page.goto(`${fileServer.origin}/${fileRelativeUrl}.html`);
    await page.setViewportSize({ width: 640, height: 670 }); // generate smaller screenshots
    await page.evaluate(
      /* eslint-disable no-undef */
      () => {
        document.querySelector(".footer").style.display = "none";
      },
      /* eslint-enable no-undef */
    );
    const wrapperLocator = await page.locator(".wrapper");
    // screenshot
    if (screenshotDirectoryUrl) {
      const screenshotFileUrl = new URL(
        `${fileRelativeUrl}.png`,
        screenshotDirectoryUrl,
      );
      const screenshotBuffer = await wrapperLocator.screenshot();
      writeFileSync(screenshotFileUrl, screenshotBuffer);
    }
    // html
    if (htmlDirectoryUrl) {
      const snapshotFileUrl = new URL(
        `${fileRelativeUrl}.html`,
        htmlDirectoryUrl,
      );
      const wrapperOuterHtml = await getLocatorOuterHtml(wrapperLocator);
      writeFileSync(snapshotFileUrl, wrapperOuterHtml);
    }
  }

  browser.close();
  fileServer.stop();
};

const getLocatorOuterHtml = async (locator) => {
  const outerHTML = await locator.evaluate((el) => el.outerHTML);
  const outerHTMLFormatted = await prettier.format(outerHTML, {
    parser: "html",
  });
  return outerHTMLFormatted;
};
